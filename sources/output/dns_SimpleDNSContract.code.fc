#include "dns_SimpleDNSContract.headers.fc";
#include "dns_SimpleDNSContract.stdlib.fc";
#include "dns_SimpleDNSContract.native.fc";
#include "dns_SimpleDNSContract.constants.fc";
#include "dns_SimpleDNSContract.storage.fc";

;;
;; Contract SimpleDNSContract functions
;;

(slice, (int, int, int), cell, cell) $SimpleDNSContract$_contract_init(slice $owner, int $seed) impure inline_ref {
    var (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)) = (null(), null(), null(), null());
    $self'owner = $owner;
    $self'records = null();
    ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace) = $Permissions$_constructor_canAdd_canRemove_canReplace(true, true, true);
    return ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains);
}

int $global_dnsExtractTopDomainLength(slice $subdomain) impure inline_ref {
    int $i = 0;
    int $needBreak = false;
    do {
        int $char = $subdomain~load_uint(8);
        $needBreak = ($char == 0);
        if ((~ $needBreak)) {
            $i = ($i + 8);
        }
    } until ($needBreak);
    throw_unless(24161, ($i != 0));
    return $i;
}

slice $global_dnsExtractTopDomain(slice $subdomain) impure inline_ref {
    int $len = $global_dnsExtractTopDomainLength($subdomain);
    return $subdomain~load_bits($len);
}

cell $global_dnsResolveNext(slice $address) impure inline_ref {
    return end_cell(__tact_store_address(store_uint(begin_cell(), 47763, 16), $address));
}

((slice, (int, int, int), cell, cell), (int, cell)) $SimpleDNSContract$_fun_resolveByKey((slice, (int, int, int), cell, cell) $self, int $totalBits, int $id, int $category) impure inline_ref {
    var (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)) = $self;
    tuple $record = $DNSRecord$_load_opt(__tact_dict_get_int_cell($self'records, 257, $id));
    if (null?($record)) {
        return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), $DNSResolveResult$_constructor_prefix_record($totalBits, null()));
    }
    if (($category == 0)) {
        return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), $DNSResolveResult$_constructor_prefix_record($totalBits, $DNSRecord$_get_categories($DNSRecord$_not_null($record))));
    }
    cell $cat = __tact_dict_get_int_cell($DNSRecord$_get_categories($DNSRecord$_not_null($record)), 257, $category);
    return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), $DNSResolveResult$_constructor_prefix_record($totalBits, null()));
}

((slice, (int, int, int), cell, cell), (int, cell)) $SimpleDNSContract$_fun_doResolveDNS((slice, (int, int, int), cell, cell) $self, slice $subdomain, int $category) impure inline_ref {
    var (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)) = $self;
    if ((slice_bits($subdomain) == 0)) {
        return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_resolveByKey(slice_bits($subdomain), 0, $category));
    }
    slice $topLevel = $global_dnsExtractTopDomain($subdomain);
    slice $next = __tact_dict_get_int_slice($self'subdomains, 257, slice_hash($topLevel));
    if ((~ null?($next))) {
        return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), $DNSResolveResult$_constructor_prefix_record(slice_bits($topLevel), $global_dnsResolveNext(__tact_not_null($next))));
    }
    return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_resolveByKey(slice_bits($subdomain), slice_hash($subdomain), $category));
}

((slice, (int, int, int), cell, cell), cell) $SimpleDNSContract$_fun_records((slice, (int, int, int), cell, cell) $self) impure inline_ref {
    var (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)) = $self;
    return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), $self'records);
}

((slice, (int, int, int), cell, cell), (int, int, int)) $SimpleDNSContract$_fun_permissions((slice, (int, int, int), cell, cell) $self) impure inline_ref {
    var (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)) = $self;
    return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace));
}

((slice, (int, int, int), cell, cell), ()) $SimpleDNSContract$_fun_requireOwner((slice, (int, int, int), cell, cell) $self) impure inline_ref {
    var (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ());
}

((slice, (int, int, int), cell, cell), slice) $SimpleDNSContract$_fun_owner((slice, (int, int, int), cell, cell) $self) impure inline_ref {
    var (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)) = $self;
    return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), $self'owner);
}

((slice, (int, int, int), cell, cell), (int, cell)) $SimpleDNSContract$_fun_dnsresolve((slice, (int, int, int), cell, cell) $self, slice $subdomain, int $category) impure inline_ref {
    var (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)) = $self;
    int $delta = 0;
    if ((preload_uint($subdomain, 8) == 0)) {
        $subdomain~load_uint(8);
        $delta = ($delta + 8);
    }
    throw_unless(24161, dns_internal_verify($subdomain));
    var ($res'prefix, $res'record) = ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_doResolveDNS($subdomain, $category);
    return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), $DNSResolveResult$_constructor_prefix_record(($res'prefix + $delta), $res'record));
}

;;
;; Receivers of a Contract SimpleDNSContract
;;

(((slice, (int, int, int), cell, cell)), ()) $SimpleDNSContract$_internal_binary_UpdateSubdomain((slice, (int, int, int), cell, cell) $self, (slice, slice) $update) impure inline {
    var ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains) = $self;
    var ($update'domain, $update'address) = $update;
    ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_requireOwner();
    slice $subdomain = dns_string_to_internal($update'domain);
    throw_unless(22696, (~ null?($subdomain)));
    int $topLevelBits = $global_dnsExtractTopDomainLength(__tact_not_null($subdomain));
    throw_unless(22696, (slice_bits(__tact_not_null($subdomain)) == $topLevelBits));
    int $id = slice_hash(__tact_not_null($subdomain));
    slice $next = __tact_dict_get_int_slice($self'subdomains, 257, $id);
    if (( ((~ null?($next))) ? (null?($update'address)) : (false) )) {
        throw_unless(21519, $self'permissions'canRemove);
        $self'subdomains~__tact_dict_set_int_slice(257, $id, null());
        $global_emit($EventSubdomainRemoved$_store_cell($EventSubdomainRemoved$_constructor_domain($update'domain)));
        ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_reply(__gen_cell_comment_dbe1c797d6d2d914c463173b1da531103d2efe747471212d1fad170fcf0c75d2());
        return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ());
    }
    if (( (null?($next)) ? ((~ null?($update'address))) : (false) )) {
        throw_unless(43961, $self'permissions'canAdd);
        $self'subdomains~__tact_dict_set_int_slice(257, $id, $update'address);
        $global_emit($EventSubdomainAdded$_store_cell($EventSubdomainAdded$_constructor_domain_address($update'domain, __tact_not_null($update'address))));
        ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_reply(__gen_cell_comment_dbe1c797d6d2d914c463173b1da531103d2efe747471212d1fad170fcf0c75d2());
        return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ());
    }
    if (( ((~ null?($next))) ? ((~ null?($update'address))) : (false) )) {
        throw_unless(43961, $self'permissions'canReplace);
        $self'subdomains~__tact_dict_set_int_slice(257, $id, $update'address);
        $global_emit($EventSubdomainUpdated$_store_cell($EventSubdomainUpdated$_constructor_domain_oldAddress_newAddress($update'domain, __tact_not_null($next), __tact_not_null($update'address))));
        ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_reply(__gen_cell_comment_dbe1c797d6d2d914c463173b1da531103d2efe747471212d1fad170fcf0c75d2());
        return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ());
    }
    throw(134);
    return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ());
}

(((slice, (int, int, int), cell, cell)), ()) $SimpleDNSContract$_internal_binary_UpdateRecord((slice, (int, int, int), cell, cell) $self, (slice, int, cell) $update) impure inline {
    var ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains) = $self;
    var ($update'domain, $update'category, $update'record) = $update;
    ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_requireOwner();
    slice $subdomain = dns_string_to_internal($update'domain);
    throw_unless(22696, (~ null?($subdomain)));
    int $id = slice_hash(__tact_not_null($subdomain));
    tuple $c = $DNSRecord$_load_opt(__tact_dict_get_int_cell($self'records, 257, $id));
    if ((~ null?($c))) {
        var ($domain'name, $domain'categories) = $DNSRecord$_not_null($c);
        cell $cat = __tact_dict_get_int_cell($domain'categories, 257, $update'category);
        if (( ((~ null?($cat))) ? (null?($update'record)) : (false) )) {
            throw_unless(21519, $self'permissions'canRemove);
            $domain'categories~__tact_dict_set_int_cell(257, $update'category, null());
            $self'records~__tact_dict_set_int_cell(257, $id, $DNSRecord$_store_cell(($domain'name, $domain'categories)));
            $global_emit($EventRecordRemoved$_store_cell($EventRecordRemoved$_constructor_domain_category($update'domain, $update'category)));
            ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_reply(__gen_cell_comment_dbe1c797d6d2d914c463173b1da531103d2efe747471212d1fad170fcf0c75d2());
            return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ());
        }
        if (( ((~ null?($cat))) ? ((~ null?($update'record))) : (false) )) {
            throw_unless(55590, $self'permissions'canReplace);
            $domain'categories~__tact_dict_set_int_cell(257, $update'category, $update'record);
            $self'records~__tact_dict_set_int_cell(257, $id, $DNSRecord$_store_cell(($domain'name, $domain'categories)));
            $global_emit($EventRecordUpdated$_store_cell($EventRecordUpdated$_constructor_domain_category_oldRecord_newRecord($update'domain, $update'category, __tact_not_null($cat), __tact_not_null($update'record))));
            ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_reply(__gen_cell_comment_dbe1c797d6d2d914c463173b1da531103d2efe747471212d1fad170fcf0c75d2());
            return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ());
        }
        if (( (null?($cat)) ? ((~ null?($update'record))) : (false) )) {
            throw_unless(43961, $self'permissions'canAdd);
            $domain'categories~__tact_dict_set_int_cell(257, $update'category, $update'record);
            $self'records~__tact_dict_set_int_cell(257, $id, $DNSRecord$_store_cell(($domain'name, $domain'categories)));
            $global_emit($EventRecordAdded$_store_cell($EventRecordAdded$_constructor_domain_category_record($update'domain, $update'category, __tact_not_null($update'record))));
            ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_reply(__gen_cell_comment_dbe1c797d6d2d914c463173b1da531103d2efe747471212d1fad170fcf0c75d2());
            return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ());
        }
    } else {
        if ((~ null?($update'record))) {
            throw_unless(43961, $self'permissions'canAdd);
            var ($domain'name, $domain'categories) = $DNSRecord$_constructor_name_categories($update'domain, null());
            $domain'categories~__tact_dict_set_int_cell(257, $update'category, $update'record);
            $self'records~__tact_dict_set_int_cell(257, $id, $DNSRecord$_store_cell(($domain'name, $domain'categories)));
            $global_emit($EventRecordAdded$_store_cell($EventRecordAdded$_constructor_domain_category_record($update'domain, $update'category, __tact_not_null($update'record))));
            ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_reply(__gen_cell_comment_dbe1c797d6d2d914c463173b1da531103d2efe747471212d1fad170fcf0c75d2());
            return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ());
        }
    }
    throw(134);
    return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ());
}

((slice, (int, int, int), cell, cell), ()) $SimpleDNSContract$_internal_text_986c2ba124bb9287eb4a0bd8d3104e1c0067a3c93952d889c74d08185bd30d4d((slice, (int, int, int), cell, cell) $self) impure inline {
    var ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains) = $self;
    ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_requireOwner();
    throw_unless(25569, $self'permissions'canRemove);
    $global_send($SendParameters$_constructor_bounce_to_value_mode_body(false, __tact_context_get_sender(), 0, (128 + 32), __gen_cell_comment_d0eb08c41bdebaa57d4264bc1d1a8ce09adbf409ec16ee54951457d71e3e04e9()));
    return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ());
}

((slice, (int, int, int), cell, cell), ()) $SimpleDNSContract$_internal_text_d2005cb41bfed83f8e13cbc2b97add71e548ab1110cae3779714ba04c69bfe19((slice, (int, int, int), cell, cell) $self) impure inline {
    var ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains) = $self;
    ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_requireOwner();
    throw_unless(26438, $self'permissions'canAdd);
    $self'permissions'canAdd = false;
    $global_emit($EventPermissionsUpdated$_store_cell($EventPermissionsUpdated$_constructor_permissions(($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace))));
    ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_reply(__gen_cell_comment_dbe1c797d6d2d914c463173b1da531103d2efe747471212d1fad170fcf0c75d2());
    return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ());
}

((slice, (int, int, int), cell, cell), ()) $SimpleDNSContract$_internal_text_39ef51f74a9c5606f6c982036567d50f546ef3dcbdf72f86bf738d2167f49f6e((slice, (int, int, int), cell, cell) $self) impure inline {
    var ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains) = $self;
    ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_requireOwner();
    throw_unless(26438, $self'permissions'canRemove);
    $self'permissions'canRemove = false;
    $global_emit($EventPermissionsUpdated$_store_cell($EventPermissionsUpdated$_constructor_permissions(($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace))));
    ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_reply(__gen_cell_comment_dbe1c797d6d2d914c463173b1da531103d2efe747471212d1fad170fcf0c75d2());
    return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ());
}

((slice, (int, int, int), cell, cell), ()) $SimpleDNSContract$_internal_text_ada62c0d7d0fa562468e3438dc53bdc30cac26e1e95ddc4408bb4beea0665fc4((slice, (int, int, int), cell, cell) $self) impure inline {
    var ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains) = $self;
    ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_requireOwner();
    throw_unless(26438, $self'permissions'canReplace);
    $self'permissions'canReplace = false;
    $global_emit($EventPermissionsUpdated$_store_cell($EventPermissionsUpdated$_constructor_permissions(($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace))));
    ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_reply(__gen_cell_comment_dbe1c797d6d2d914c463173b1da531103d2efe747471212d1fad170fcf0c75d2());
    return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ());
}

(((slice, (int, int, int), cell, cell)), ()) $SimpleDNSContract$_internal_binary_Deploy((slice, (int, int, int), cell, cell) $self, (int) $deploy) impure inline {
    var ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_reply($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ());
}

(((slice, (int, int, int), cell, cell)), ()) $SimpleDNSContract$_internal_binary_FactoryDeploy((slice, (int, int, int), cell, cell) $self, (int, slice) $deploy) impure inline {
    var ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains) = $self;
    var ($deploy'queryId, $deploy'cashback) = $deploy;
    ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_forward($deploy'cashback, $DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ());
}

(((slice, (int, int, int), cell, cell)), ()) $SimpleDNSContract$_internal_binary_ChangeOwner((slice, (int, int, int), cell, cell) $self, (int, slice) $msg) impure inline {
    var ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains) = $self;
    var ($msg'queryId, $msg'newOwner) = $msg;
    ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_requireOwner();
    $self'owner = $msg'newOwner;
    ($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains)~$SimpleDNSContract$_fun_reply($ChangeOwnerOk$_store_cell($ChangeOwnerOk$_constructor_queryId_newOwner($msg'queryId, $msg'newOwner)));
    return (($self'owner, ($self'permissions'canAdd, $self'permissions'canRemove, $self'permissions'canReplace), $self'records, $self'subdomains), ());
}

;;
;; Get methods of a Contract SimpleDNSContract
;;

_ %records() method_id(114139) {
    var self = $SimpleDNSContract$_contract_load();
    var res = self~$SimpleDNSContract$_fun_records();
    return res;
}

_ %permissions() method_id(73541) {
    var self = $SimpleDNSContract$_contract_load();
    var res = self~$SimpleDNSContract$_fun_permissions();
    return $Permissions$_to_external(res);
}

_ %owner() method_id(83229) {
    var self = $SimpleDNSContract$_contract_load();
    var res = self~$SimpleDNSContract$_fun_owner();
    return res;
}

_ %dnsresolve(slice $$subdomain, int $$category) method_id(123660) {
    slice $subdomain = $$subdomain;
    int $category = $$category;
    var self = $SimpleDNSContract$_contract_load();
    var res = self~$SimpleDNSContract$_fun_dnsresolve($subdomain, $category);
    return $DNSResolveResult$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.tact-lang.contract.dns.v0"H >> 128,
        "org.ton.ownable.transferable.v2"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmdnTTyaA4DsksiyrufSWvgek4fSoduJ5UjdbF56cq9uzn";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SimpleDNSContract
;;

((slice, (int, int, int), cell, cell), int) $SimpleDNSContract$_contract_router_internal((slice, (int, int, int), cell, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive UpdateSubdomain message
    if (op == 1547073789) {
        var msg = in_msg~$UpdateSubdomain$_load();
        self~$SimpleDNSContract$_internal_binary_UpdateSubdomain(msg);
        return (self, true);
    }
    
    ;; Receive UpdateRecord message
    if (op == 3532961574) {
        var msg = in_msg~$UpdateRecord$_load();
        self~$SimpleDNSContract$_internal_binary_UpdateRecord(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$SimpleDNSContract$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Receive FactoryDeploy message
    if (op == 1829761339) {
        var msg = in_msg~$FactoryDeploy$_load();
        self~$SimpleDNSContract$_internal_binary_FactoryDeploy(msg);
        return (self, true);
    }
    
    ;; Receive ChangeOwner message
    if (op == 2174598809) {
        var msg = in_msg~$ChangeOwner$_load();
        self~$SimpleDNSContract$_internal_binary_ChangeOwner(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Destroy" message
        if (text_op == 0x986c2ba124bb9287eb4a0bd8d3104e1c0067a3c93952d889c74d08185bd30d4d) {
            self~$SimpleDNSContract$_internal_text_986c2ba124bb9287eb4a0bd8d3104e1c0067a3c93952d889c74d08185bd30d4d();
            return (self, true);
        }
        
        ;; Receive "Burn canAdd" message
        if (text_op == 0xd2005cb41bfed83f8e13cbc2b97add71e548ab1110cae3779714ba04c69bfe19) {
            self~$SimpleDNSContract$_internal_text_d2005cb41bfed83f8e13cbc2b97add71e548ab1110cae3779714ba04c69bfe19();
            return (self, true);
        }
        
        ;; Receive "Burn canRemove" message
        if (text_op == 0x39ef51f74a9c5606f6c982036567d50f546ef3dcbdf72f86bf738d2167f49f6e) {
            self~$SimpleDNSContract$_internal_text_39ef51f74a9c5606f6c982036567d50f546ef3dcbdf72f86bf738d2167f49f6e();
            return (self, true);
        }
        
        ;; Receive "Burn canReplace" message
        if (text_op == 0xada62c0d7d0fa562468e3438dc53bdc30cac26e1e95ddc4408bb4beea0665fc4) {
            self~$SimpleDNSContract$_internal_text_ada62c0d7d0fa562468e3438dc53bdc30cac26e1e95ddc4408bb4beea0665fc4();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SimpleDNSContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$SimpleDNSContract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    $SimpleDNSContract$_contract_store(self);
}
