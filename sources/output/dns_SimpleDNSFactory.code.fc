#include "dns_SimpleDNSFactory.headers.fc";
#include "dns_SimpleDNSFactory.stdlib.fc";
#include "dns_SimpleDNSFactory.native.fc";
#include "dns_SimpleDNSFactory.storage.fc";

;;
;; Contract SimpleDNSFactory functions
;;

(int) $SimpleDNSFactory$_contract_init() impure inline_ref {
    var (($self'counter)) = (null());
    $self'counter = 0;
    return ($self'counter);
}

;;
;; Receivers of a Contract SimpleDNSFactory
;;

((int), ()) $SimpleDNSFactory$_internal_text_85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246((int) $self) impure inline {
    var ($self'counter) = $self;
    $self'counter = ($self'counter + 1);
    var ($init'code, $init'data) = $SimpleDNSContract$_init_child(__tact_context_sys, __tact_context_get_sender(), $self'counter);
    slice $address = $global_contractAddress(($init'code, $init'data));
    raw_reserve(100000000, 0);
    $global_send($SendParameters$_constructor_bounce_to_value_mode_code_data_body(false, $address, 0, (128 + 2), $init'code, $init'data, $FactoryDeploy$_store_cell($FactoryDeploy$_constructor_queryId_cashback($self'counter, __tact_context_get_sender()))));
    return (($self'counter), ());
}

(((int)), ()) $SimpleDNSFactory$_internal_binary_Deploy((int) $self, (int) $deploy) impure inline {
    var ($self'counter) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'counter)~$SimpleDNSFactory$_fun_reply($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'counter), ());
}

;;
;; Get methods of a Contract SimpleDNSFactory
;;

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmWFSB5n3qGG1WHX673YtiDhTChZpnQai98FoZpE9EnSDp";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract SimpleDNSFactory
;;

((int), int) $SimpleDNSFactory$_contract_router_internal((int) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$SimpleDNSFactory$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Deploy" message
        if (text_op == 0x85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246) {
            self~$SimpleDNSFactory$_internal_text_85d288384c0043458b02803cb22059f68803c553c3656344346468dac961f246();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $SimpleDNSFactory$_contract_load();
    
    ;; Handle operation
    int handled = self~$SimpleDNSFactory$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $SimpleDNSFactory$_contract_store(self);
}
